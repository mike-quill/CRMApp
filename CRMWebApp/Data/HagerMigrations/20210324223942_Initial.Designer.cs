// <auto-generated />
using System;
using CRMWebApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CRMWebApp.Data.HagerMigrations
{
    [DbContext(typeof(HagerDbContext))]
    [Migration("20210324223942_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("CRM")
                .HasAnnotation("ProductVersion", "3.1.11");

            modelBuilder.Entity("CRMWebApp.Models.Announcement", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<int>("PermissionLevel")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("CRMWebApp.Models.BillingTerm", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("BillingPreference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("BillingTerms");
                });

            modelBuilder.Entity("CRMWebApp.Models.Category", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryPreference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("CRMWebApp.Models.Company", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingAddress1")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("BillingAddress2")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("BillingCity")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int?>("BillingCountryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BillingPostalCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("BillingProvinceID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("BillingTermID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CreditCheck")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("CurrencyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("Location")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<string>("ShippingAddress1")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ShippingAddress2")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ShippingCity")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int?>("ShippingCountryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ShippingPostalCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ShippingProvinceID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Website")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("BillingCountryID");

                    b.HasIndex("BillingProvinceID");

                    b.HasIndex("BillingTermID");

                    b.HasIndex("CurrencyID");

                    b.HasIndex("ShippingCountryID");

                    b.HasIndex("ShippingProvinceID");

                    b.HasIndex("Name", "Location")
                        .IsUnique();

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("CRMWebApp.Models.CompanyContractorType", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ContractorTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyID", "ContractorTypeID");

                    b.HasIndex("ContractorTypeID");

                    b.ToTable("CompanyContractorTypes");
                });

            modelBuilder.Entity("CRMWebApp.Models.CompanyCustomerType", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyID", "CustomerTypeID");

                    b.HasIndex("CustomerTypeID");

                    b.ToTable("CompanyCustomerTypes");
                });

            modelBuilder.Entity("CRMWebApp.Models.CompanyVendorType", b =>
                {
                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("VendorTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("CompanyID", "VendorTypeID");

                    b.HasIndex("VendorTypeID");

                    b.ToTable("CompanyVendorTypes");
                });

            modelBuilder.Entity("CRMWebApp.Models.Contact", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CellPhone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int>("CompanyID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("JobTitle")
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("WorkPhone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.HasKey("ID");

                    b.HasIndex("CompanyID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("CRMWebApp.Models.ContactCategory", b =>
                {
                    b.Property<int>("ContactID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ContactID", "CategoryID");

                    b.HasIndex("CategoryID");

                    b.ToTable("ContactCategories");
                });

            modelBuilder.Entity("CRMWebApp.Models.ContractorType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(40);

                    b.Property<int>("Preference")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("ContractorTypes");
                });

            modelBuilder.Entity("CRMWebApp.Models.Country", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryPreference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CRMWebApp.Models.Currency", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CurrencyPreference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("CRMWebApp.Models.CustomerType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(40);

                    b.Property<int>("Preference")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("CustomerTypes");
                });

            modelBuilder.Entity("CRMWebApp.Models.Employee", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Active")
                        .HasColumnType("INTEGER");

                    b.Property<string>("AddressLine1")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("CellPhone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<string>("City")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int?>("CountryID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateInactive")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("DateJoined")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT")
                        .HasMaxLength(255);

                    b.Property<string>("EmergencyContactName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("EmergencyContactPhone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<int?>("EmploymentTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Expense")
                        .HasColumnType("decimal(9,2)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("HomePhone")
                        .HasColumnType("TEXT")
                        .HasMaxLength(10);

                    b.Property<bool>("IsUser")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("JobPositionID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("KeyFob")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT")
                        .HasMaxLength(500);

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ProvinceID")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("Wage")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmploymentTypeID");

                    b.HasIndex("JobPositionID");

                    b.HasIndex("ProvinceID");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("CRMWebApp.Models.EmploymentType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EmploymentPreference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("EmploymentTypes");
                });

            modelBuilder.Entity("CRMWebApp.Models.JobPosition", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("JobPreference")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(50);

                    b.HasKey("ID");

                    b.ToTable("JobPositions");
                });

            modelBuilder.Entity("CRMWebApp.Models.Province", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CountryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(40);

                    b.Property<int>("ProvincePreference")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CountryID");

                    b.HasIndex("Name", "CountryID")
                        .IsUnique();

                    b.ToTable("Provinces");
                });

            modelBuilder.Entity("CRMWebApp.Models.VendorType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(40);

                    b.Property<int>("Preference")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.ToTable("VendorTypes");
                });

            modelBuilder.Entity("CRMWebApp.Models.Company", b =>
                {
                    b.HasOne("CRMWebApp.Models.Country", "BillingCountry")
                        .WithMany()
                        .HasForeignKey("BillingCountryID");

                    b.HasOne("CRMWebApp.Models.Province", "BillingProvince")
                        .WithMany()
                        .HasForeignKey("BillingProvinceID");

                    b.HasOne("CRMWebApp.Models.BillingTerm", "BillingTerm")
                        .WithMany()
                        .HasForeignKey("BillingTermID");

                    b.HasOne("CRMWebApp.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyID");

                    b.HasOne("CRMWebApp.Models.Country", "ShippingCountry")
                        .WithMany()
                        .HasForeignKey("ShippingCountryID");

                    b.HasOne("CRMWebApp.Models.Province", "ShippingProvince")
                        .WithMany()
                        .HasForeignKey("ShippingProvinceID");
                });

            modelBuilder.Entity("CRMWebApp.Models.CompanyContractorType", b =>
                {
                    b.HasOne("CRMWebApp.Models.Company", "Company")
                        .WithMany("CompanyContractorTypes")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMWebApp.Models.ContractorType", "ContractorType")
                        .WithMany("CompanyContractorTypes")
                        .HasForeignKey("ContractorTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMWebApp.Models.CompanyCustomerType", b =>
                {
                    b.HasOne("CRMWebApp.Models.Company", "Company")
                        .WithMany("CompanyCustomerTypes")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMWebApp.Models.CustomerType", "CustomerType")
                        .WithMany("CompanyCustomerTypes")
                        .HasForeignKey("CustomerTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMWebApp.Models.CompanyVendorType", b =>
                {
                    b.HasOne("CRMWebApp.Models.Company", "Company")
                        .WithMany("CompanyVendorTypes")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CRMWebApp.Models.VendorType", "VendorType")
                        .WithMany("CompanyVendorTypes")
                        .HasForeignKey("VendorTypeID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMWebApp.Models.Contact", b =>
                {
                    b.HasOne("CRMWebApp.Models.Company", "Company")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMWebApp.Models.ContactCategory", b =>
                {
                    b.HasOne("CRMWebApp.Models.Category", "Category")
                        .WithMany("ContactCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("CRMWebApp.Models.Contact", "Contact")
                        .WithMany("ContactCategories")
                        .HasForeignKey("ContactID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CRMWebApp.Models.Employee", b =>
                {
                    b.HasOne("CRMWebApp.Models.Country", "Country")
                        .WithMany("Employees")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CRMWebApp.Models.EmploymentType", "EmploymentType")
                        .WithMany("Employees")
                        .HasForeignKey("EmploymentTypeID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CRMWebApp.Models.JobPosition", "JobPosition")
                        .WithMany("Employees")
                        .HasForeignKey("JobPositionID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("CRMWebApp.Models.Province", "Province")
                        .WithMany("Employees")
                        .HasForeignKey("ProvinceID")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("CRMWebApp.Models.Province", b =>
                {
                    b.HasOne("CRMWebApp.Models.Country", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
